Timer unit: 1e-06 s

Total time: 0.223776 s
File: <ipython-input-153-ff74310b1a6d>
Function: d_dynamics at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           def d_dynamics(
     4                                                   X,
     5                                                   t_list,
     6                                                   _basis,
     7                                                   _constant,
     8                                                   _diag_mels,
     9                                                   _n_conns,
    10                                                   _mels,
    11                                                   _x_prime,
    12                                                   _acting_on,
    13                                                   _w,
    14                                                   c_r,
    15                                                   s_r,
    16                                                   _ad2o_o,
    17                                                   _ad2_bool    
    18                                                   ):
    19                                           
    20                                               # basis is float64[:]
    21                                           
    22                                           
    23         1          5.0      5.0      0.0      batch_size = X.shape[0]
    24         1          2.0      2.0      0.0      sys_size = X.shape[1]
    25         1          2.0      2.0      0.0      t_num = len(t_list)
    26         1          1.0      1.0      0.0      L = X.shape[1]
    27         1        211.0    211.0      0.1      p_array = np.zeros((batch_size, t_num, L),dtype= np.int8) 
    28         1         36.0     36.0      0.0      p_array[:,0,:] = X[:,:]
    29         1         10.0     10.0      0.0      X = X.astype(np.int8)
    30         1         32.0     32.0      0.0      _x_prime = _x_prime[:,:,0,:].astype(np.int8)
    31         1          3.0      3.0      0.0      _mels = _mels[:,:,0]
    32         1          9.0      9.0      0.0      t_mels = np.zeros(int(sys_size/4), dtype=np.float64)
    33         1          5.0      5.0      0.0      conn_op_prime = np.zeros(int(sys_size/4), dtype=np.int32)
    34         1          3.0      3.0      0.0      conn_op_prime_1 = np.zeros(int(sys_size/4), dtype=np.int32)
    35                                           
    36         1          3.0      3.0      0.0      acting_on_prime = np.zeros((int(sys_size/4), 2), dtype=np.int32)
    37         1          2.0      2.0      0.0      acting_on_prime_1 = np.zeros((int(sys_size/4), 2), dtype=np.int32)
    38                                           
    39         1          2.0      2.0      0.0      x_prime = np.zeros((int(sys_size/4), 2), dtype=np.int32)
    40         1          4.0      4.0      0.0      op_labels_bool = np.zeros(len(_acting_on), dtype = np.bool)
    41                                               
    42                                           #     np.random.seed(2021)
    43                                           #         T = np.zeros(batch_size)
    44         1          5.0      5.0      0.0      t_delta = t_list[1] - t_list[0]
    45                                           
    46         1          1.0      1.0      0.0      l = 0
    47       101         48.0      0.5      0.0      for b in range(batch_size):
    48       100         48.0      0.5      0.0          T = 0
    49       100         91.0      0.9      0.0          ti_old = np.int64(0)
    50       100         65.0      0.7      0.0          x_b = X[b]
    51       100         64.0      0.6      0.0          P = p_array[b]
    52       100        192.0      1.9      0.1          sections = np.zeros(1, dtype=np.int64)
    53       100        171.0      1.7      0.1          op_labels = np.arange(len(_acting_on))
    54       100         56.0      0.6      0.0          n_conn = 0
    55                                           #         print(b)
    56                                           
    57                                           
    58       100        204.0      2.0      0.1          r = (x_b).astype(np.float64).dot(_w)
    59                                                   
    60                                                   while True:
    61                                           
    62      5164       9833.0      1.9      4.4              r = (x_b).astype(np.float64).dot(_w)
    63                                                       
    64      5164       6054.0      1.2      2.7              tan = np.tanh(r)
    65     10328      23839.0      2.3     10.7              sdy.get_transition_one_2( x_b, c_r, s_r, tan, sections, _basis,_n_conns,  
    66      5164       2595.0      0.5      1.2                                   _mels, _x_prime, _acting_on, op_labels, op_labels_bool ,x_prime, 
    67      5164       2411.0      0.5      1.1                                   acting_on_prime, conn_op_prime, conn_op_prime_1, n_conn, t_mels)
    68      5164       3485.0      0.7      1.6              n_conn = sections[0]
    69                                           
    70                                           
    71                                                       
    72                                                       
    73                                                       
    74                                           #             print(n_conn_1)
    75                                           #             print(conn_op_prime_1)
    76                                                       
    77                                           #                 print(x_b)
    78                                           #                 print(x_prime, sites, mels)
    79                                           #                 for n in range(batch_size):
    80                                           #                     a_0[n] = (-1)* mels[sections[n]: sections[n+1]].sum()
    81                                           #             a_0 = (-1) * t_mels[:n_conn].sum()
    82      5164       2673.0      0.5      1.2              a_0 = 0
    83     32734      17128.0      0.5      7.7              for i in range(n_conn):
    84     27570      18871.0      0.7      8.4                  a_0 -= t_mels[i]
    85                                           #             print(sections)
    86                                           
    87      5164       3086.0      0.6      1.4              r_1 = random.random()
    88      5164       2649.0      0.5      1.2              r_2 = random.random()
    89                                           
    90      5164       7065.0      1.4      3.2              tau = np.log(1/r_1)/a_0
    91      5164       2991.0      0.6      1.3              T += tau
    92                                           
    93                                           #                 print(T,ti_new)
    94      5164       3853.0      0.7      1.7              if T > (t_list[-1] + t_delta):
    95       100        133.0      1.3      0.1                  P[ti_old+1:] = x_b
    96       100         47.0      0.5      0.0                  break
    97                                           
    98      5064       6370.0      1.3      2.8              ti_new = np.int64(T // t_delta)
    99                                           
   100      5064       2839.0      0.6      1.3              if ti_new > ti_old:
   101      3919       6057.0      1.5      2.7                  P[ti_old+1:ti_new+1] = x_b
   102                                           #                     P[ti_new] = x_b
   103      3919       2068.0      0.5      0.9                  ti_old = ti_new
   104      5064       2631.0      0.5      1.2              s = 0
   105                                                   
   106                                           
   107                                                           
   108     15968       8831.0      0.6      3.9              for i in range(n_conn):
   109     15968      11135.0      0.7      5.0                  s -= t_mels[i]
   110                                           #                 print(type(r_2), type(a_0))
   111     15968       9582.0      0.6      4.3                  if s >= r_2 * a_0:
   112                                           #                     print(list(x_b))
   113                                           
   114      5064       3300.0      0.7      1.5                      acting_on_prime_i = acting_on_prime[i]
   115      5064       9908.0      2.0      4.4                      x_b[acting_on_prime_i] = x_prime[i]
   116                                           #                     if not hex_.is_dimer_basis(x_b):
   117                                           #                         raise NameError("why")
   118      5064       4223.0      0.8      1.9                      conn_op_prime[:] = conn_op_prime_1
   119      5064       3200.0      0.6      1.4                      op_label = conn_op_prime[i]
   120      5064       3542.0      0.7      1.6                      op_labels = _ad2o_o[op_label]
   121      5064       4670.0      0.9      2.1                      op_labels_bool[:] = _ad2_bool[op_label]
   122                                           #                     print(f"op_labels : {op_labels}")
   123                                           #                     print(f"conn_op_prime : {conn_op_prime_1}")
   124                                           #                     print(f"n_conn : {n_conn}")
   125                                           #                     print(f"op_label : {op_label}")
   126                                           #                     print(f" acting_on_prime_i : {acting_on_prime_i}")
   127                                           #                     print("\n ", "-" * 20, '\n\n')
   128                                           #                     r_ = (x_b).astype(np.float64).dot(_w)
   129                                                               
   130                                           #                     print(t_mels[:n_conn], n_conn)
   131                                                               
   132                                           #                     r +=  2 * x_prime[i].astype(np.float64).dot(_w[acting_on_prime_i, :])
   133      5064      31960.0      6.3     14.3                      r[:] = r + 2 * (x_prime[i][0] * _w[acting_on_prime_i[0]] + x_prime[i][1] * _w[acting_on_prime_i[1]])
   134                                           
   135      5064       2761.0      0.5      1.2                      break
   136      5064       2588.0      0.5      1.2              l += 1
   137       100        122.0      1.2      0.1          p_array[b,:,:] = P[:,:]
   138                                           
   139         1          1.0      1.0      0.0      return p_array